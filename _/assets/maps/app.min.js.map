{"version":3,"sources":["entry.js"],"names":["document","body","addEventListener","e","target","matches","offset","attr","$","post","localized","ajaxURL","action","done","data","console","log","fail","always","doFetch","preventDefault","term","val","doSearch"],"mappings":"aACaA,SAASC,KAoFtBD,SAASE,iBAAiB,QAAS,SAAUC,GAC3C,IAAMC,EAASD,EAAEC,OACbA,EAAOC,QAAQ,WArCrB,SAAiBD,GACf,IAAIE,EAASF,EAAOG,KAAK,eACzBC,EAAEC,KAAKC,UAAUC,QAAS,CACxBC,OAAQ,gBACRN,OAAQA,GACP,cACAO,KAAK,SAAUC,GACdC,QAAQC,IAAI,YAAaF,KAE1BG,KAAK,cAGLC,OAAO,cA0BRC,CAAQf,KAET,GAEHJ,SAASE,iBAAiB,SAAU,SAAUC,GAC5CA,EAAEiB,iBACF,IAAMhB,EAASD,EAAEC,OACbA,EAAOC,QAAQ,YA7BrB,SAAkBD,GAChB,IAAIiB,EAAOb,EAAE,QAASJ,GAAQkB,MAC1BD,GACFb,EAAEC,KAAKC,UAAUC,QAAS,CACxBC,OAAQ,iBACRS,KAAMA,GACL,cACAR,KAAK,SAAUC,GACdC,QAAQC,IAAI,aAAcF,KAE3BG,KAAK,cAGLC,OAAO,cAiBVK,CAASnB,KAEV","file":"../../../app.min.js","sourcesContent":["//setup\nconst body = document.body;\n\n//includes\nfunction swipedetect(el, callback) {\n  var touchsurface = el,\n    swipedir,\n    startX,\n    startY,\n    distX,\n    distY,\n    threshold = 75, //required min distance traveled to be considered swipe\n    restraint = 100, // maximum distance allowed at the same time in perpendicular direction\n    allowedTime = 300, // maximum time allowed to travel that distance\n    elapsedTime,\n    startTime,\n    handleswipe = callback || function (swipedir) { }\n\n  touchsurface.addEventListener('touchstart', function (e) {\n    var touchobj = e.changedTouches[0]\n    swipedir = 'none'\n    //    dist = 0\n    startX = touchobj.pageX\n    startY = touchobj.pageY\n    startTime = new Date().getTime() // record time when finger first makes contact with surface\n    e.preventDefault()\n  }, false)\n\n  touchsurface.addEventListener('touchmove', function (e) {\n    e.preventDefault() // prevent scrolling when inside DIV\n  }, false)\n\n  touchsurface.addEventListener('touchend', function (e) {\n    var touchobj = e.changedTouches[0]\n    distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface\n    distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface\n    elapsedTime = new Date().getTime() - startTime // get time elapsed\n    if (elapsedTime <= allowedTime) { // first condition for swipe met\n      if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) { // 2nd condition for horizontal swipe met\n        swipedir = (distX < 0) ? 'left' : 'right' // if dist traveled is negative, it indicates left swipe\n      }\n      else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) { // 2nd condition for vertical swipe met\n        swipedir = (distY < 0) ? 'up' : 'down' // if dist traveled is negative, it indicates up swipe\n      }\n    }\n    handleswipe(swipedir)\n    e.preventDefault()\n  }, false)\n}\n\nfunction doFetch(target) {\n  let offset = target.attr('data-offset');\n  $.post(localized.ajaxURL, {\n    action: \"BLANKET_fetch\",\n    offset: offset\n  }, function () { })\n    .done(function (data) {\n      console.log(\"fetchdata\", data);\n    })\n    .fail(function () {\n      // alert( \"error | fail\" );\n    })\n    .always(function () {\n      // alert( \"finished | always\" );\n    });\n}//doFetch\nfunction doSearch(target) {\n  let term = $('input', target).val();\n  if (term) {\n    $.post(localized.ajaxURL, {\n      action: \"BLANKET_search\",\n      term: term\n    }, function () { })\n      .done(function (data) {\n        console.log(\"searchdata\", data);\n      })\n      .fail(function () {\n        // alert( \"error | fail\" );\n      })\n      .always(function () {\n        // alert( \"finished | always\" );\n      });\n  }\n}//doSearch\n\ndocument.addEventListener('click', function (e) {\n  const target = e.target;\n  if (target.matches('#fetch')) {\n    doFetch(target);\n  }\n}, false);\n\ndocument.addEventListener('submit', function (e) {\n  e.preventDefault();\n  const target = e.target;\n  if (target.matches('#search')) {\n    doSearch(target);\n  }\n}, false);\n"]}